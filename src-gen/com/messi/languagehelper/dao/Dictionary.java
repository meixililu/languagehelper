package com.messi.languagehelper.dao;

import java.util.List;
import com.messi.languagehelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DICTIONARY.
 */
public class Dictionary {

    private Long id;
    private String word_name;
    private String to;
    private String from;
    private String ph_am;
    private String ph_en;
    private String ph_zh;
    private String questionVoiceId;
    private String questionAudioPath;
    private String iscollected;
    private Integer visit_times;
    private Integer speak_speed;
    private String backup1;
    private String backup2;
    private String backup3;
    private Long partsId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DictionaryDao myDao;

    private List<Parts> partsList;

    public Dictionary() {
    }

    public Dictionary(Long id) {
        this.id = id;
    }

    public Dictionary(Long id, String word_name, String to, String from, String ph_am, String ph_en, String ph_zh, String questionVoiceId, String questionAudioPath, String iscollected, Integer visit_times, Integer speak_speed, String backup1, String backup2, String backup3, Long partsId) {
        this.id = id;
        this.word_name = word_name;
        this.to = to;
        this.from = from;
        this.ph_am = ph_am;
        this.ph_en = ph_en;
        this.ph_zh = ph_zh;
        this.questionVoiceId = questionVoiceId;
        this.questionAudioPath = questionAudioPath;
        this.iscollected = iscollected;
        this.visit_times = visit_times;
        this.speak_speed = speak_speed;
        this.backup1 = backup1;
        this.backup2 = backup2;
        this.backup3 = backup3;
        this.partsId = partsId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDictionaryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getWord_name() {
        return word_name;
    }

    public void setWord_name(String word_name) {
        this.word_name = word_name;
    }

    public String getTo() {
        return to;
    }

    public void setTo(String to) {
        this.to = to;
    }

    public String getFrom() {
        return from;
    }

    public void setFrom(String from) {
        this.from = from;
    }

    public String getPh_am() {
        return ph_am;
    }

    public void setPh_am(String ph_am) {
        this.ph_am = ph_am;
    }

    public String getPh_en() {
        return ph_en;
    }

    public void setPh_en(String ph_en) {
        this.ph_en = ph_en;
    }

    public String getPh_zh() {
        return ph_zh;
    }

    public void setPh_zh(String ph_zh) {
        this.ph_zh = ph_zh;
    }

    public String getQuestionVoiceId() {
        return questionVoiceId;
    }

    public void setQuestionVoiceId(String questionVoiceId) {
        this.questionVoiceId = questionVoiceId;
    }

    public String getQuestionAudioPath() {
        return questionAudioPath;
    }

    public void setQuestionAudioPath(String questionAudioPath) {
        this.questionAudioPath = questionAudioPath;
    }

    public String getIscollected() {
        return iscollected;
    }

    public void setIscollected(String iscollected) {
        this.iscollected = iscollected;
    }

    public Integer getVisit_times() {
        return visit_times;
    }

    public void setVisit_times(Integer visit_times) {
        this.visit_times = visit_times;
    }

    public Integer getSpeak_speed() {
        return speak_speed;
    }

    public void setSpeak_speed(Integer speak_speed) {
        this.speak_speed = speak_speed;
    }

    public String getBackup1() {
        return backup1;
    }

    public void setBackup1(String backup1) {
        this.backup1 = backup1;
    }

    public String getBackup2() {
        return backup2;
    }

    public void setBackup2(String backup2) {
        this.backup2 = backup2;
    }

    public String getBackup3() {
        return backup3;
    }

    public void setBackup3(String backup3) {
        this.backup3 = backup3;
    }

    public Long getPartsId() {
        return partsId;
    }

    public void setPartsId(Long partsId) {
        this.partsId = partsId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Parts> getPartsList() {
        if (partsList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PartsDao targetDao = daoSession.getPartsDao();
            List<Parts> partsListNew = targetDao._queryDictionary_PartsList(id);
            synchronized (this) {
                if(partsList == null) {
                    partsList = partsListNew;
                }
            }
        }
        return partsList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPartsList() {
        partsList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
