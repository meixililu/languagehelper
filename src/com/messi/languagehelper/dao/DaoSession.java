package com.messi.languagehelper.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.messi.languagehelper.dao.record;
import com.messi.languagehelper.dao.Means;
import com.messi.languagehelper.dao.Parts;
import com.messi.languagehelper.dao.Dictionary;
import com.messi.languagehelper.dao.Tag;
import com.messi.languagehelper.dao.EveryDaySentence;

import com.messi.languagehelper.dao.recordDao;
import com.messi.languagehelper.dao.MeansDao;
import com.messi.languagehelper.dao.PartsDao;
import com.messi.languagehelper.dao.DictionaryDao;
import com.messi.languagehelper.dao.TagDao;
import com.messi.languagehelper.dao.EveryDaySentenceDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig recordDaoConfig;
    private final DaoConfig meansDaoConfig;
    private final DaoConfig partsDaoConfig;
    private final DaoConfig dictionaryDaoConfig;
    private final DaoConfig tagDaoConfig;
    private final DaoConfig everyDaySentenceDaoConfig;

    private final recordDao recordDao;
    private final MeansDao meansDao;
    private final PartsDao partsDao;
    private final DictionaryDao dictionaryDao;
    private final TagDao tagDao;
    private final EveryDaySentenceDao everyDaySentenceDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        recordDaoConfig = daoConfigMap.get(recordDao.class).clone();
        recordDaoConfig.initIdentityScope(type);

        meansDaoConfig = daoConfigMap.get(MeansDao.class).clone();
        meansDaoConfig.initIdentityScope(type);

        partsDaoConfig = daoConfigMap.get(PartsDao.class).clone();
        partsDaoConfig.initIdentityScope(type);

        dictionaryDaoConfig = daoConfigMap.get(DictionaryDao.class).clone();
        dictionaryDaoConfig.initIdentityScope(type);

        tagDaoConfig = daoConfigMap.get(TagDao.class).clone();
        tagDaoConfig.initIdentityScope(type);

        everyDaySentenceDaoConfig = daoConfigMap.get(EveryDaySentenceDao.class).clone();
        everyDaySentenceDaoConfig.initIdentityScope(type);

        recordDao = new recordDao(recordDaoConfig, this);
        meansDao = new MeansDao(meansDaoConfig, this);
        partsDao = new PartsDao(partsDaoConfig, this);
        dictionaryDao = new DictionaryDao(dictionaryDaoConfig, this);
        tagDao = new TagDao(tagDaoConfig, this);
        everyDaySentenceDao = new EveryDaySentenceDao(everyDaySentenceDaoConfig, this);

        registerDao(record.class, recordDao);
        registerDao(Means.class, meansDao);
        registerDao(Parts.class, partsDao);
        registerDao(Dictionary.class, dictionaryDao);
        registerDao(Tag.class, tagDao);
        registerDao(EveryDaySentence.class, everyDaySentenceDao);
    }
    
    public void clear() {
        recordDaoConfig.getIdentityScope().clear();
        meansDaoConfig.getIdentityScope().clear();
        partsDaoConfig.getIdentityScope().clear();
        dictionaryDaoConfig.getIdentityScope().clear();
        tagDaoConfig.getIdentityScope().clear();
        everyDaySentenceDaoConfig.getIdentityScope().clear();
    }

    public recordDao getRecordDao() {
        return recordDao;
    }

    public MeansDao getMeansDao() {
        return meansDao;
    }

    public PartsDao getPartsDao() {
        return partsDao;
    }

    public DictionaryDao getDictionaryDao() {
        return dictionaryDao;
    }

    public TagDao getTagDao() {
        return tagDao;
    }

    public EveryDaySentenceDao getEveryDaySentenceDao() {
        return everyDaySentenceDao;
    }

}
