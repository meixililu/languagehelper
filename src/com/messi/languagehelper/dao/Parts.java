package com.messi.languagehelper.dao;

import java.util.List;
import com.messi.languagehelper.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PARTS.
 */
public class Parts {

    private Long id;
    private String part;
    private Long meansId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PartsDao myDao;

    private List<Means> parts;

    public void setParts(List<Means> parts) {
		this.parts = parts;
	}

	public Parts() {
    }

    public Parts(Long id) {
        this.id = id;
    }

    public Parts(Long id, String part, Long meansId) {
        this.id = id;
        this.part = part;
        this.meansId = meansId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPartsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPart() {
        return part;
    }

    public void setPart(String part) {
        this.part = part;
    }

    public Long getMeansId() {
        return meansId;
    }

    public void setMeansId(Long meansId) {
        this.meansId = meansId;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Means> getParts() {
        if (parts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MeansDao targetDao = daoSession.getMeansDao();
            List<Means> partsNew = targetDao._queryParts_Parts(id);
            synchronized (this) {
                if(parts == null) {
                    parts = partsNew;
                }
            }
        }
        return parts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetParts() {
        parts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

	@Override
	public String toString() {
		return "Parts [id=" + id + ", part=" + part + ", meansId=" + meansId
				+ ", parts=" + parts + "]";
	}

}
